{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Ball Finder","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"C1588zKlAibX","colab_type":"code","outputId":"fda600a1-502c-4901-991b-6d1e51d9dcf1","executionInfo":{"status":"ok","timestamp":1575593924872,"user_tz":300,"elapsed":146585,"user":{"displayName":"James Bao","photoUrl":"","userId":"07069691870981246166"}},"colab":{"base_uri":"https://localhost:8080/","height":121}},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PMuYUCKgI9aA","colab_type":"code","outputId":"dd43e143-83ac-4c47-c426-4991c64b0ca4","executionInfo":{"status":"ok","timestamp":1575593927453,"user_tz":300,"elapsed":8993,"user":{"displayName":"James Bao","photoUrl":"","userId":"07069691870981246166"}},"colab":{"base_uri":"https://localhost:8080/","height":454}},"source":["%cd drive/My\\ Drive/420\\ Project\n","!dir\n","!pwd"],"execution_count":2,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/420 Project\n","Analyzing-the-Detailed-Metrics-for-Soccer-Penalty-Shots.docx\n","ballInfo.txt\n","comparison.jpg\n","Deep-Learning\n","findSoccerball.jpg\n","frozen_inference_graph.pb\n","image2.jpg\n","images\n","pen4.avi\n","pozuelo_high.avi\n","Project\\ Proposal.gdoc\n","report.docx\n","resources.gdoc\n","rooney.jpg\n","soccerball.jpg\n","soccer_highs.avi\n","soccer_label_map.pbtxt\n","soccer_mini.avi\n","tes2.mp4\n","test2.ipynb\n","TESTER\\ FOR\\ JAMEs.ipynb\n","test.jpg\n","test.mp4\n","videos\n","/content/drive/My Drive/420 Project\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LrJGj2XJ1j2X","colab_type":"code","outputId":"e395d9a4-130d-42e5-bfa2-0ea2fda1d203","executionInfo":{"status":"ok","timestamp":1575593929406,"user_tz":300,"elapsed":5869,"user":{"displayName":"James Bao","photoUrl":"","userId":"07069691870981246166"}},"colab":{"base_uri":"https://localhost:8080/","height":79}},"source":["from __future__ import division\n","import numpy as np\n","import os\n","import six.moves.urllib as urllib\n","import sys\n","import tarfile\n","import tensorflow as tf\n","import zipfile\n","import math\n","from collections import defaultdict\n","from io import StringIO\n","from matplotlib import pyplot as plt\n","from PIL import Image\n","sys.path.append(\"..\")\n","import cv2"],"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/html":["<p style=\"color: red;\">\n","The default version of TensorFlow in Colab will soon switch to TensorFlow 2.x.<br>\n","We recommend you <a href=\"https://www.tensorflow.org/guide/migrate\" target=\"_blank\">upgrade</a> now \n","or ensure your notebook will continue to use TensorFlow 1.x via the <code>%tensorflow_version 1.x</code> magic:\n","<a href=\"https://colab.research.google.com/notebooks/tensorflow_version.ipynb\" target=\"_blank\">more info</a>.</p>\n"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ybmhHZqX_7sj","colab_type":"code","outputId":"d3ea21ea-510b-4448-a485-d4b54d4a6f73","executionInfo":{"status":"ok","timestamp":1575148490163,"user_tz":300,"elapsed":1421,"user":{"displayName":"James Bao","photoUrl":"","userId":"07069691870981246166"}},"colab":{"base_uri":"https://localhost:8080/","height":138}},"source":["# %cd \"drive/My Drive/420 Project\"\n","# !pwd\n","\n","# !dir \n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[Errno 2] No such file or directory: 'drive/My Drive/420 Project'\n","/content/drive/My Drive/420 Project\n","/content/drive/My Drive/420 Project\n","frozen_inference_graph.pb  resources.gdoc\t   TESTER\\ FOR\\ JAMEs.ipynb\n","image2.jpg\t\t   soccerball.jpg\t   test.jpg\n","images\t\t\t   soccer_label_map.pbtxt  test.mp4\n","Project\\ Proposal.gdoc\t   tes2.mp4\t\t   utils\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GwKw_Ktj3KYI","colab_type":"code","colab":{}},"source":["modelPath =  'frozen_inference_graph.pb'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"cvq5pQBY3QTh","colab_type":"code","colab":{}},"source":["tfDetectionGraph = tf.Graph()\n","\n","\n","\n","with tfDetectionGraph.as_default():\n","    graph = tf.GraphDef()\n","    with tf.gfile.GFile(modelPath,'rb') as temp:\n","        graphModel = temp.read()\n","        graph.ParseFromString(graphModel)\n","        tf.import_graph_def(graph,name='')\n","    "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xFFc_yR8Jab4","colab_type":"code","colab":{}},"source":["def loss(patchLeft,patchRight):\n","    if patchLeft.shape!=patchRight.shape:\n","        print(\"loss error\")\n","        return float('inf')\n","    # one = patchLeft - patchLeft.mean()\n","    # two = patchRight - patchRight.mean()\n","    # product = np.mean(one*two)\n","    # std = patchLeft.std() * patchRight.std()\n","    patch = patchLeft-patchRight\n","    patch = patch*patch\n","    return np.sum(patch)\n","\n","    if std == 0:\n","        return 0\n","    return product/std\n","\n","def calcBallScore(imageSeg, comp):\n","    height,width,_ = comp.shape\n","    height2,width2,_ = imageSeg.shape\n","    bestLoss = float(\"-inf\")\n","    bestCoord = (0,0)\n","    if height2< height or width2<width:\n","        return bestLoss,bestCoord\n","    for y in range(0, height2 - height):\n","        for x in range(0, width2-width):\n","            patch = imageSeg[y:y+height, x:x+width]\n","            score = loss(patch,comp)\n","            if (score>bestLoss):\n","                bestLoss = score\n","                bestCoord = (x,y)\n","    return score,bestCoord\n","\n","\n","\n","def findBall(image_np, boxInfo,previousMatch):\n","    comp = cv2.imread(\"comparison.jpg\")\n","    image = np.copy(image_np)\n","    h,w,_ = comp.shape\n","    pm = previousMatch\n","    bestScore = float('-inf')\n","    bestCoord = [0,0,0,0]\n","    bestCoord2 =[0,0,0,0]\n","    newBox = False\n","    for n in boxInfo:\n","        score = n[\"score\"]\n","        coord = n[\"coord\"]\n","        xmin = coord[0][0]\n","        ymin = coord[0][1]\n","        xmax = coord[1][0]\n","        ymax = coord[1][1]\n","\n","        imageSeg = image[ymin-10:ymax+10,xmin-10:xmax+10]\n","        # ballScore,coord = calcBallScore(imageSeg, comp)\n","        if (imageSeg.shape[0]<h or imageSeg.shape[1]<w):\n","            print(\"size wrongggg\")\n","            continue\n","        ballScore,coord =matchTemplate(imageSeg,comp, previousMatch)\n","\n","        if ballScore>bestScore:\n","            bestScore = ballScore\n","            bestCoord = [xmin,ymin,xmax,ymax]\n","            bestCoord2 = [xmin+coord[0]-5,ymin+coord[1]-5,xmin+coord[2]-5,ymin+coord[3]-5]    \n","        # if ballScore>bestScore:\n","\n","        #     if pm ==[0,0,0,0]:\n","        #         bestScore = ballScore\n","        #         bestCoord = [xmin,ymin,xmax,ymax]\n","        #         bestCoord2 = [xmin+coord[0],ymin+coord[1],xmin+coord[2],ymin+coord[3]]\n","                \n","        #     elif overlap([xmin+coord[0],ymin+coord[1],xmin+coord[2],ymin+coord[3]],pm):   \n","        #         bestScore = ballScore\n","        #         bestCoord = [xmin,ymin,xmax,ymax]\n","        #         bestCoord2 = [xmin+coord[0],ymin+coord[1],xmin+coord[2],ymin+coord[3]]\n","\n","                \n","        \n","    return bestCoord,bestCoord2\n","def overlap(coord1,coord2): \n","     \n","    if(coord1[0]>coord2[2] or coord1[1]>coord2[3]): \n","        return False\n","  \n","    if(coord2[0] > coord1[2] or coord1[1] > coord2[3]): \n","        return False\n","  \n","    return True\n","def matchTemplate(image_np,comp,previousMatch):\n","    if comp is None:\n","        comp = cv2.imread(\"comparison.jpg\")\n","    h,w,_ = comp.shape\n","\n","    image = np.copy(image_np)\n","    res = cv2.matchTemplate(image,comp,cv2.TM_CCOEFF_NORMED)\n","\n","    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(np.copy(res))\n","    \n","    pt = (max_loc[0],max_loc[1])\n","\n","    # return max_val,[pt[0], pt[1], pt[0] + w, pt[1] + h]\n","\n","    # cv2.rectangle(image_np, pt, (pt[0] + w, pt[1] + h), (0,0,255), 2)\n","    if (previousMatch==[0,0,0,0]):\n","        return max_val,[pt[0], pt[1], pt[0] + w, pt[1] + h]\n","    elif overlap([pt[0], pt[1], pt[0] + w, pt[1] + h],previousMatch):\n","        return max_val,[pt[0], pt[1], pt[0] + w, pt[1] + h]\n","    else:\n","        res2 = np.reshape(res, res.shape[0]*res.shape[1])\n","        sort = np.argsort(res2)\n","        # (y1, x1) = np.unravel_index(sort[0], res.shape)\n","        for i in range(min(len(sort),20)):\n","            x,y = np.unravel_index(sort[i], res.shape)\n","            pt =(x,y)\n","            if overlap([pt[0], pt[1], pt[0] + w, pt[1] + h],previousMatch):\n","                return max_val,[pt[0], pt[1], pt[0] + w, pt[1] + h]\n","    pt = (max_loc[0],max_loc[1])\n","    \n","    return 0,[pt[0], pt[1], pt[0] + w, pt[1] + h]\n","    return matchTemplate(image_np, cv2.resize(comp, (comp.shape[0]+6,comp.shape[1]+6),previousMatch))\n","    threshold = 0.5\n","    loc = np.where( res >= threshold)\n","\n","\n","\n","    for pt in zip(*loc[::-1]):\n","        cv2.rectangle(image_np, pt, (pt[0] + w, pt[1] + h), (0,0,255), 2)\n","        \n","    return image_np\n","    # cv2.imwrite(\"../../findSoccerball.jpg\",image)\n","\n","\n","def MyCorrelation(I, h, mode):\n","    imgH, imgW = I.shape\n","    filterH, filterW = h.shape\n","\n","    def _calcPixel(x,y,image):\n","        patch = image[y-filterH//2:y+filterH//2+1, x-filterW//2:x+filterW//2+1]\n","        multiplication = np.multiply(patch, h)\n","\n","        return np.sum(multiplication)\n","\n","    newImage = np.zeros((imgH+filterH*2-2,imgW+filterW*2-2))\n","\n","    vPad = filterH//2\n","    hPad = filterW//2\n","\n","    newImage[vPad*2:vPad*2+imgH,hPad*2:hPad*2+imgW] = np.copy(I)\n","\n","    initX,initY = (filterW//2, filterH//2)\n","    # position = (filterW//2, filterH//2)\n","    # for x in range(len(newImage)):\n","    #     for y in range(len(newImage[0])):\n","    newImage_copy = np.copy(newImage)\n","    for x in range(imgW+hPad*2):\n","        for y in range(imgH+vPad*2):\n","            currX,currY = initX+x,initY+y\n","            newImage[currY, currX] = _calcPixel(currX,currY,newImage_copy)\n","\n","    if (mode == \"same\"):\n","        return (newImage[vPad*2:vPad*2+imgH,hPad*2:hPad*2+imgW])\n","    elif(mode == \"full\"):\n","        return newImage\n","    elif(mode == \"valid\"):\n","        return (newImage[vPad*4:imgH,hPad*4:imgW])\n","\n","    return newImage\n","    \n","def MyConvolution(I,h,mode):\n","    flippedFilter = np.flip(h)\n","\n","    red = I[:,:,0]\n","    green = I[:,:,1]\n","    blue = I[:,:,2]\n","\n","    blurR = MyCorrelation(red, flippedFilter, mode)\n","    blurG = MyCorrelation(green, flippedFilter, mode)\n","    blurB = MyCorrelation(blue, flippedFilter, mode)\n","\n","    \n","    return (blurR,blurR,blurB)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QbtQz4tWBV-1","colab_type":"code","outputId":"07adf815-e3a0-4ba6-cbda-23de6f24d8e7","executionInfo":{"status":"ok","timestamp":1575594292786,"user_tz":300,"elapsed":54240,"user":{"displayName":"James Bao","photoUrl":"","userId":"07069691870981246166"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["v = 6\n","\n","filename = 'videos/pen%dslow.mp4'%v\n","\n","outputName = 'videos/pen%dslowFindTrial'%v + \".avi\"\n","\n","vid = cv2.VideoCapture(filename)\n","\n","width = int(vid.get(cv2.CAP_PROP_FRAME_WIDTH))\n","height = int(vid.get(cv2.CAP_PROP_FRAME_HEIGHT))\n","fps = vid.get(5)\n","new_height = height\n","new_width = width\n","\n","frameCount = vid.get(cv2.CAP_PROP_FRAME_COUNT)\n","vwriter = cv2.VideoWriter(outputName ,cv2.VideoWriter_fourcc(*'MJPG'),fps, (width, height)) \n","\n","with tfDetectionGraph.as_default():\n","    with tf.Session(graph=tfDetectionGraph) as detector:\n","        frameCounter = 0\n","        ballCoord = []\n","        ballInfo =outputName + '\\n'\n","        ballCoord.append(outputName)\n","        # skip to specific frame (testing purposes only)\n","        # for i in range(15):\n","        #     success, image = vid.read()\n","        #     if not success:\n","        #         print(\"whoops\")\n","\n","\n","        success, image_np = vid.read()\n","        height,width,_ = image_np.shape\n","        previousMatch = [0,0,0,0]\n","        while success:\n","            \n","            kernel = np.array([[-1,-1,-1,-1,-1],\n","                                [-1,2,2,2,-1],\n","                                [-1,2,8,2,-1],\n","                                [-2,2,2,2,-1],\n","                                [-1,-1,-1,-1,-1]])/8.0\n","            image_np = cv2.filter2D(image_np, -1, kernel)\n","\n","            image_expanded = np.expand_dims(image_np,axis =0)\n","            image_tensor = tfDetectionGraph.get_tensor_by_name('image_tensor:0')\n","            boxes = tfDetectionGraph.get_tensor_by_name('detection_boxes:0')\n","            scores = tfDetectionGraph.get_tensor_by_name('detection_scores:0')\n","            classes = tfDetectionGraph.get_tensor_by_name('detection_classes:0')\n","            num_detections = tfDetectionGraph.get_tensor_by_name('num_detections:0')        \n","\n","            boxes, scores, classes, num_detections = detector.run([boxes, scores, classes, num_detections], feed_dict = {image_tensor: image_expanded})\n","            orig_image = image_np\n","            origW, origH, _ = orig_image.shape\n","            \n","            boxes3 = np.squeeze(boxes)\n","            classes3 = np.squeeze(classes).astype(np.int32)\n","            scores3 = np.squeeze(scores)\n","                        \n","            boxes2=[]\n","            classes2=[]\n","            scores2=[]\n","            for i in range(len(boxes3)):\n","                if (classes3[i] == 2):\n","                    boxes2.append(boxes3[i])\n","                    classes2.append(classes3[i])\n","                    scores2.append(scores3[i])\n","            \n","            classes3 = np.array(classes2)\n","            boxes3 = np.array(boxes2)\n","            scores3 = np.array(scores2)\n","            boxInfo = []\n","            threshold =0.001\n","\n","            for i in range(len(boxes3)):\n","                if scores3[i]>threshold:\n","                    ymin = int(boxes3[i][0] * new_height)\n","                    xmin = int(boxes3[i][1] * new_width)\n","                    ymax = int(boxes3[i][2] * new_height)\n","                    xmax = int(boxes3[i][3] * new_width)\n","                    boxcoord = ((xmin,ymin),(xmax,ymax))\n","                    score = scores3[i]\n","                    boxInfo.append({\"coord\": boxcoord, \"score\": score})\n","\n","            res, coord = matchTemplate(image_np,None, previousMatch)\n","\n","            \n","            \n","\n","            finalBox,finalBox2 = findBall(image_np, boxInfo, previousMatch)\n","            previousMatch2 = finalBox2\n","            xmin,ymin,xmax,ymax = coord\n","            if res ==0:\n","                xmin,ymin,xmax,ymax = previousMatch\n","            else:\n","                previousMatch = coord\n","            \n","            cv2.rectangle(image_np, (xmin,ymin),(xmax,ymax),(0,0,0),2)\n","            xavg = (xmin+xmax)/2\n","            yavg = (ymin+ymax)/2\n","            ballInfo +=str(yavg) + \" \" +str(xavg)\n","            ballInfo += \"\\n\"\n","        \n","            blurred = cv2.GaussianBlur(np.copy(image_np),(25,25),cv2.BORDER_DEFAULT)\n","            mask = np.ones(image_np.shape)\n","            rectSize = 100\n","            newXmin = max(0,xmin-rectSize)\n","            newYmin = max(0,ymin-rectSize)\n","            newXmax = min(image_np.shape[1],xmax+rectSize,)\n","            newYmax = min(image_np.shape[0],ymax+rectSize,)\n","\n","            cv2.rectangle(mask, (newXmin,newYmin),(newXmax,newYmax),(0,0,0),-1)\n","\n","            finalBlur = np.multiply(image_np, 1-mask) +np.multiply(blurred,mask)\n","\n","            vwriter.write(finalBlur.astype(np.uint8))\n","\n","            \n","            success, image_np = vid.read()\n","        file = open(\"ballInfo%d.txt\"%v,'w')\n","        file.write(ballInfo)\n","        file.close()\n","        vid.release()\n","        vwriter.release()\n","        print(\"done\")\n"],"execution_count":10,"outputs":[{"output_type":"stream","text":["done\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5nDVLwTjl9dn","colab_type":"text"},"source":[""]}]}